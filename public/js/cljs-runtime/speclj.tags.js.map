{"version":3,"sources":["speclj/tags.cljc"],"mappings":";AAKA,mCAAA,nCAAMA,8EAAgBC,SAASC;AAA/B,AACE,GAAI,AAACC,uBAAOF;AAAZ;;AAEE,OAACG,6CAAEH,SAAS,AAACI,uDAAaJ,SAAS,AAACK,cAAIJ;;;AAE5C,mCAAA,nCAAMK,8EAAgBC,SAASN;AAA/B,AACE,GAAI,AAACC,uBAAOK;AAAZ;;AAEE,OAACC,cAAI,eAAA,WAAAC,1BAACC;AAAD,AACG,0CAAAD,nCAACE,0BAAUJ;GACZN;;;AAEX,AAAA,qCAAA,6CAAAW,lFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAAMD,8EACFb;AADJ,AACU,OAACe,iEAAiBC,qCAAahB;;;AADzC,CAAA,mEAAA,nEAAMa,8EAEFI,OAAOjB;AAFX,AAGG,SACE,AAACF,iCAAe,AAAA,2FAAWmB,QAAQjB,WACnC,AAACK,iCAAe,AAAA,4FAAWY,QAAQjB;;;AALxC,CAAA,6DAAA,7DAAMa;;AAAN,AAOA,uBAAA,vBAAMK,sDAAUC;AAAhB,AACE,oBAAIA;AACF,OAACE,gDAAM,iBAAAC,WAAA,AAAAF,gBAAW,AAAUD;AAArB,AAAA,gHAAAG,4CAAAA,pJAACJ,qDAAAA,+DAAAA;KAAR,AAAAE,gBAAuC,AAAQD;;AADjD;;;AAIF,2BAAA,3BAAMI,8DAAcJ;AAApB,AACE,IAAMK,cAAY,mBAAA,WAAAC,9BAACE;AAAD,AAAW,UAAK,CAAAF,oBAAA;GAAhB,WAAAC;AAAA,AAA2B,OAACN,gBAAM,AAAAM;GAAgBP;AAApE,AACE,OAACS,4CAAIV,qBAASM;;AAElB,oCAAA,pCAAMK,gFAAuBV;AAA7B,AACE,IAAMK,cAAY,mBAAA,WAAAM,9BAACH;AAAD,AAAW,UAAK,CAAAG,oBAAA;GAAhB,WAAAC;AAAA,AAA2B,OAACX,gBAAM,AAAAW;GAAgBZ;AAApE,AACE,mDAAA,WAAAa,vDAACJ;AAAD,AAAM,OAAAK,uCAAA,CAAA,2DAAA,4DAAA,CAAAD,iBAA8B,qBAAAA,rBAACd;GAAaM;;AAEtD,AAAA,8BAAA,sCAAAb,pEAAMwB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAArB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAMqB;AAAN,AACM,OAACC,0DAAgBpB;;;AADvB,CAAA,4DAAA,5DAAMmB,uEAEFlB;AAFJ,AAGG,IAAMlB,WAAS,AAACsC,cAAI,AAACT,4CAAIU,eAAK,AAAA,2FAAWrB;IACnCX,WAAS,AAAC+B,cAAI,AAACT,4CAAIU,eAAK,AAAA,4FAAWrB;AADzC,AAEE,GAAM,EAAIlB,cAASO;AAAnB,AACE,QAAA,kBACK,YAAA,+FAAA,zGAAMP,UAAS,CAAA,gFAAA,jEAAoB,kDAAA,lDAACwC,uDAAUxC,8BAC9C,YAAA,+FAAA,zGAAMO,UAAS,CAAA,gFAAA,jEAAoB,kDAAA,lDAACiC,uDAAUjC;;AAHrD;;;;AALL,CAAA,sDAAA,tDAAM6B;;AAAN","names":["speclj.tags/pass-includes?","includes","tags","cljs.core/empty?","cljs.core._EQ_","clojure.set.intersection","cljs.core/set","speclj.tags/pass-excludes?","excludes","cljs.core/not","p1__44448#","cljs.core/some","cljs.core/contains?","var_args","G__44450","speclj.tags/pass-tag-filter?","js/Error","speclj.tags.pass_tag_filter_QMARK_","speclj.config/*tag-filter*","filter","speclj.tags/tags-for","context","cljs.core/deref","clojure.set.union","G__44451","speclj.tags/tag-sets-for","context-seq","p1__44452#","p1__44453#","cljs.core/tree-seq","cljs.core.map","speclj.tags/context-with-tags-seq","p1__44454#","p1__44455#","p1__44456#","cljs.core/PersistentHashMap","G__44458","speclj.tags/describe-filter","speclj.tags.describe_filter","cljs.core/seq","cljs.core/name","clojure.string.join"],"sourcesContent":["(ns speclj.tags\n  (:require [clojure.set :refer [intersection union]]\n            [clojure.string :refer [join]]\n            [speclj.config :refer [*tag-filter*]]))\n\n(defn pass-includes? [includes tags]\n  (if (empty? includes)\n    true\n    (= includes (intersection includes (set tags)))))\n\n(defn pass-excludes? [excludes tags]\n  (if (empty? excludes)\n    true\n    (not (some\n           #(contains? excludes %)\n           tags))))\n\n(defn pass-tag-filter?\n  ([tags] (pass-tag-filter? *tag-filter* tags))\n  ([filter tags]\n   (and\n     (pass-includes? (:includes filter) tags)\n     (pass-excludes? (:excludes filter) tags))))\n\n(defn tags-for [context]\n  (if context\n    (union (tags-for @(.-parent context)) @(.-tags context))\n    #{}))\n\n(defn tag-sets-for [context]\n  (let [context-seq (tree-seq #(not (nil? %)) #(deref (.-children %)) context)]\n    (map tags-for context-seq)))\n\n(defn context-with-tags-seq [context]\n  (let [context-seq (tree-seq #(not (nil? %)) #(deref (.-children %)) context)]\n    (map #(hash-map :context % :tag-set (tags-for %)) context-seq)))\n\n(defn describe-filter\n  ([] (describe-filter *tag-filter*))\n  ([filter]\n   (let [includes (seq (map name (:includes filter)))\n         excludes (seq (map name (:excludes filter)))]\n     (when (or includes excludes)\n       (str \"Filtering tags.\"\n            (when includes (str \" Including: \" (join \", \" includes) \".\"))\n            (when excludes (str \" Excluding: \" (join \", \" excludes) \".\")))))))\n"],"x_google_ignoreList":[0]}