{"version":3,"sources":["speclj/config.cljc"],"mappings":"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","names":["speclj.config/default-reporters","cljs.core.atom","speclj.config/active-reporters","speclj.config/*reporters*","temp__5821__auto__","cljs.core/deref","reporters","js/Error","speclj.config/default-runner","speclj.config/default-runner-fn","speclj.config/active-runner","speclj.config/*runner*","runner","speclj.config/*omit-pending?*","speclj.config/*color?*","speclj.config/*full-stack-trace?*","speclj.config/*tag-filter*","speclj.config/default-config","speclj.config/config-bindings","speclj.config/load-runner","name","e44425","speclj.platform/dynamically-invoke","e","speclj.config/load-reporter-by-name","e44426","speclj.config/load-reporter","name-or-object","speclj.config/parse-tags","values","result","cljs.core/seq","value","cljs.core/name","cljs.core/first","cljs.core._EQ_","cljs.core.update_in","cljs.core/conj","cljs.core.keyword","cljs.core.apply","cljs.core/str","cljs.core/rest","speclj.config/config-mappings","_","speclj.config/with-config","config","action","*runner*-orig-val__44428","*reporters*-orig-val__44429","*specs*-orig-val__44430","*color?*-orig-val__44431","*omit-pending?*-orig-val__44432","*full-stack-trace?*-orig-val__44433","*tag-filter*-orig-val__44434","*runner*-temp-val__44436","*reporters*-temp-val__44437","*specs*-temp-val__44438","*color?*-temp-val__44439","*omit-pending?*-temp-val__44440","*full-stack-trace?*-temp-val__44441","*tag-filter*-temp-val__44442","cljs.core.println","cljs.core.mapv","speclj.config/*specs*"],"sourcesContent":["(ns speclj.config\n  (:require [speclj.platform :refer [dynamically-invoke]]))\n\n(declare ^:dynamic *parent-description*)\n\n(declare #^{:dynamic true} *reporters*)\n(def default-reporters (atom nil))\n\n(defn active-reporters []\n  (if #?(:clj (bound? #'*reporters*) :cljs *reporters*)\n    *reporters*\n    (if-let [reporters @default-reporters]\n      reporters\n      (throw (new #?(:clj java.lang.Exception :cljs js/Error) \"*reporters* is unbound and no default value has been provided\")))))\n\n(declare #^{:dynamic true} *runner*)\n(def default-runner (atom nil))\n(def default-runner-fn (atom nil))\n\n(defn active-runner []\n  (if #?(:clj (bound? #'*runner*) :cljs *runner*)\n    *runner*\n    (if-let [runner @default-runner]\n      runner\n      (throw (new #?(:clj java.lang.Exception :cljs js/Error)\n                  \"*runner* is unbound and no default value has been provided\")))))\n\n(declare #^{:dynamic true} *specs*)\n\n(def #^{:dynamic true} *omit-pending?* false)\n\n(def #^{:dynamic true} *color?* false)\n\n(def #^{:dynamic true} *full-stack-trace?* false)\n\n(def #^{:dynamic true} *tag-filter* {:include #{} :exclude #{}})\n\n(def default-config\n  {:specs        [\"spec\"]\n   :runner       \"standard\"\n   :reporters    [\"progress\"]\n   :tags         []\n   :omit-pending false})\n\n#?(:clj\n   (defn config-bindings\n     \"Returns a map of vars to values for all the ear-muffed vars in the speclj.config namespace.\n     Can be used in (with-bindings ...) call to load a configuration state\"\n     []\n     (let [ns              (the-ns 'speclj.config)\n           all-vars        (dissoc (ns-interns ns) '*parent-description*)\n           non-config-keys (filter #(not (.startsWith (name %) \"*\")) (keys all-vars))\n           config-vars     (apply dissoc all-vars non-config-keys)]\n       (reduce #(assoc %1 %2 (deref %2)) {} (vals config-vars))))\n\n   :cljs\n   (defn config-bindings [] (throw \"Not Supported in ClojureScript\")))\n\n(defn load-runner [name]\n  (try\n    (dynamically-invoke (str \"speclj.run.\" name) (str \"new-\" name \"-runner\"))\n    (catch #?(:clj java.lang.Exception :cljs :default) e\n      (throw (new #?(:clj java.lang.Exception :cljs js/Error) (str \"Failed to load runner: \" name) e)))))\n\n(defn- load-reporter-by-name [name]\n  (try\n    (dynamically-invoke (str \"speclj.report.\" name) (str \"new-\" name \"-reporter\"))\n    (catch #?(:clj java.lang.Exception :cljs :default) e\n      (throw (new #?(:clj java.lang.Exception :cljs js/Error) (str \"Failed to load reporter: \" name) e)))))\n\n#?(:clj\n   (defn load-reporter [name-or-object]\n     (if (instance? (Class/forName \"speclj.reporting.Reporter\") name-or-object)\n       name-or-object\n       (load-reporter-by-name name-or-object)))\n\n   :cljs\n   (defn load-reporter [name-or-object]\n     (if (string? name-or-object)\n       (load-reporter-by-name name-or-object)\n       name-or-object)))\n\n(defn parse-tags [values]\n  (loop [result {:includes #{} :excludes #{}} values values]\n    (if (seq values)\n      (let [value (name (first values))]\n        (if (= \\~ (first value))\n          (recur (update-in result [:excludes] conj (keyword (apply str (rest value)))) (rest values))\n          (recur (update-in result [:includes] conj (keyword value)) (rest values))))\n      result)))\n\n#?(:clj\n   (defn config-mappings [config]\n     {#'*runner*            (if (:runner config) (load-runner (:runner config)) (active-runner))\n      #'*reporters*         (if (:reporters config) (map load-reporter (:reporters config)) (active-reporters))\n      #'*specs*             (:specs config)\n      #'*color?*            (:color config)\n      #'*omit-pending?*     (:omit-pending config)\n      #'*full-stack-trace?* (not (nil? (:stacktrace config)))\n      #'*tag-filter*        (parse-tags (:tags config))})\n\n\n   :cljs\n   (defn config-mappings [_] (throw \"Not Supported in ClojureScript\")))\n\n(defn with-config\n  \"Runs the given function with all the configurations set.  Useful in cljs because config-mappings can't be used.\"\n  [config action]\n  (binding [*runner*            (if (:runner config) (do (println \"loading runner in config\") (load-runner (:runner config))) (active-runner))\n            *reporters*         (if (:reporters config) (mapv load-reporter (:reporters config)) (active-reporters))\n            *specs*             (:specs config)\n            *color?*            (:color config)\n            *omit-pending?*     (:omit-pending config)\n            *full-stack-trace?* (not (nil? (:stacktrace config)))\n            *tag-filter*        (parse-tags (:tags config))]\n    (action)))\n"],"x_google_ignoreList":[0]}