{"version":3,"sources":["speclj/report/progress.cljc"],"mappings":"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","names":["speclj.report.progress/full-name","characteristic","cljs.core/deref","context","name","speclj.report.progress/print-failure","id","result","failure","cljs.core/println","cljs.core.println","speclj.reporting.indent","speclj.reporting/red","speclj.platform/error-message","speclj.platform/failure?","speclj.reporting/grey","speclj.platform/failure-source","speclj.reporting/stack-trace-str","speclj.report.progress/print-failures","failures","cljs.core/seq","n__5593__auto__","i","cljs.core/count","cljs.core.nth","speclj.report.progress/print-pendings","pending-results","speclj.config/*omit-pending?*","seq__44683","chunk__44684","count__44685","i__44686","temp__5823__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","speclj.reporting/yellow","speclj.report.progress/print-errors","error-results","seq__44701","chunk__44702","count__44703","i__44704","vec__44715","vec__44718","number","cljs.core.partition","cljs.core.interleave","cljs.core/iterate","cljs.core/inc","cljs.core/flush","speclj.report.progress/print-duration","results","speclj.platform/format-seconds","speclj.reporting/tally-time","speclj.report.progress/color-fn-for","result-map","cljs.core.not_EQ_","cljs.core.concat","speclj.reporting/green","speclj.report.progress/apply-pending-tally","report","tally","cljs.core.conj","speclj.report.progress/apply-error-tally","speclj.report.progress/describe-counts-for","cljs.core/zipmap","cljs.core/keys","cljs.core.map","cljs.core/vals","always-on-counts","cljs.core.apply","cljs.core/+","clojure.string.join","speclj.report.progress/print-tally","color-fn","speclj.report.progress/print-summary","speclj.results/categorize","cljs.core/PROTOCOL_SENTINEL","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","speclj.report.progress/ProgressReporter","speclj.report.progress/->ProgressReporter","this","message","description","cljs.core.print","speclj.report.progress/new-progress-reporter","cljs.core/reset!","speclj.config/default-reporters"],"sourcesContent":["(ns speclj.report.progress\n  (:require [clojure.string :as str]\n            [speclj.config :refer [*omit-pending?* default-reporters]]\n            [speclj.platform :as platform]\n            [speclj.reporting :refer [green grey indent red stack-trace-str tally-time yellow]]\n            [speclj.results :refer [categorize]]))\n\n(defn full-name [characteristic]\n  (loop [context @(.-parent characteristic) name (.-name characteristic)]\n    (if context\n      (recur @(.-parent context) (str (.-name context) \" \" name))\n      name)))\n\n(defn print-failure [id result]\n  (let [characteristic (.-characteristic result)\n        failure        (.-failure result)]\n    (println)\n    (println (indent 1 id \") \" (full-name characteristic)))\n    (println (red (indent 2.5 (platform/error-message failure))))\n    (if (platform/failure? failure)\n      (println (grey (indent 2.5 (platform/failure-source failure))))\n      (println (grey (indent 2.5 (stack-trace-str failure)))))))\n\n(defn print-failures [failures]\n  (when (seq failures)\n    (println)\n    (println \"Failures:\"))\n  (dotimes [i (count failures)]\n    (print-failure (inc i) (nth failures i))))\n\n(defn print-pendings [pending-results]\n  (when-not *omit-pending?*\n    (when (seq pending-results)\n      (println)\n      (println \"Pending:\"))\n    (doseq [result pending-results]\n      (println)\n      (println (yellow (str \"  \" (full-name (.-characteristic result)))))\n      (println (grey (str \"    ; \" (platform/error-message (.-exception result)))))\n      (println (grey (str \"    ; \" (platform/failure-source (.-exception result))))))))\n\n(defn print-errors [error-results]\n  (when (seq error-results)\n    (println)\n    (println \"Errors:\"))\n  (doseq [[number result] (partition 2 (interleave (iterate inc 1) error-results))]\n    (println)\n    (println (indent 1 number \") \" (red (str (.-exception result)))))\n    (println (grey (indent 2.5 (stack-trace-str (.-exception result))))))\n  (flush))\n\n(defn- print-duration [results]\n  (println)\n  (println \"Finished in\" (platform/format-seconds (tally-time results)) \"seconds\"))\n\n(defn color-fn-for [result-map]\n  (cond\n    (not= 0 (count (concat (:fail result-map) (:error result-map)))) red\n    (not= 0 (count (:pending result-map))) yellow\n    :else green))\n\n(defn- apply-pending-tally [report tally]\n  (if (pos? (:pending tally))\n    (conj report (str (:pending tally) \" pending\"))\n    report))\n\n(defn- apply-error-tally [report tally]\n  (if (pos? (:error tally))\n    (conj report (str (:error tally) \" errors\"))\n    report))\n\n(defn describe-counts-for [result-map]\n  (let [tally            (zipmap (keys result-map) (map count (vals result-map)))\n        always-on-counts [(str (apply + (vals tally)) \" examples\")\n                          (str (:fail tally) \" failures\")]]\n    (str/join \", \"\n              (-> always-on-counts\n                  (apply-pending-tally tally)\n                  (apply-error-tally tally)))))\n\n(defn- print-tally [result-map]\n  (let [color-fn (color-fn-for result-map)]\n    (println (color-fn (describe-counts-for result-map)))))\n\n(defn print-summary [results]\n  (let [result-map (categorize results)]\n    (print-failures (:fail result-map))\n    (print-pendings (:pending result-map))\n    (print-errors (:error result-map))\n    (print-duration results)\n    (print-tally result-map)))\n\n(deftype ProgressReporter []\n  speclj.reporting/Reporter\n  (report-message [this message]\n    (println message) (flush))\n  (report-description [this description])\n  (report-pass [this result]\n    (print (green \".\")) (flush))\n  (report-pending [this result]\n    (print (yellow \"*\")) (flush))\n  (report-fail [this result]\n    (print (red \"F\")) (flush))\n  (report-error [this result]\n    (print (red \"E\")) (flush))\n  (report-runs [this results]\n    (println)\n    (print-summary results)))\n\n(defn new-progress-reporter []\n  (ProgressReporter.))\n\n(reset! default-reporters [(new-progress-reporter)])\n"],"x_google_ignoreList":[0]}