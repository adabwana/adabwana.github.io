{"version":3,"sources":["speclj/report/documentation.cljc"],"mappings":";AAKA,uCAAA,vCAAMA,sFAAUC;AAAhB,AACE,oBAAA,AAAAC,hBAAOD,gCAAW,AAAUA;YAA5B,RAAuCE;;AAAvC,AACE,oBAAIF;AACF,eAAA,AAAAC,gBAAQ,AAAUD;eAAW,SAAA,RAAKE;;;;;AAClCA;;;;;AAEN,4CAAA,5CAAMC,gGAAeH,UAAUI;AAA/B,AACE,GAAA,AAAAC,cAAA,AAAAJ,gBAAS,AAAeD;AAAWI;;AAAK,0DAAA,NAAKA,sDAAS,wBAAA,xBAACE;;;AAEzD,AAAA;;;;;;;AAAA,AAAA,CAAA,AAAA,yFAAAC,zFAASK;;AAAT,CAAA,AAAA,+GAAA,/GAASA,0HAGUE,MAAKC;;AAHxB,AAAA,gBAAA,ZAGmBD;AAHnB,AAII,AAACE,yGAAQD;;AAAS,OAACE;;;AAJvB,CAAA,AAAA,mHAAA,nHAASL,8HAMcE,MAAKI;;AAN5B,AAAA,gBAAA,ZAMuBJ;AANvB,AAOI,IAAMZ,QAAM,AAACH,qCAASmB;AAAtB,AACE,GAAM,WAAA,VAAOhB;AAAb,AAAoB,AAACiB;;AAArB;;AACA,AAACH,yGAAQ,AAACb,0CAAce,YAAY,4CAAK,AAACE,6DAAOlB,wDAAM,AAAQgB;;AAC/D,OAACD;;;AAVP,CAAA,AAAA,4GAAA,5GAASL,uHAYOE,MAAKO;;AAZrB,AAAA,gBAAA,ZAYgBP;AAZhB,AAaI,IAAMQ,iBAAe,AAAkBD;IACjCnB,QAAe,AAACH,qCAASuB;AAD/B,AAEE,AAACN,yGAAQ,AAACb,0CAAcmB,eAAe,AAACC,uBAAM,6HAAA,7HAACH,6DAAO,SAAA,RAAKlB,oEAAY,AAAQoB;;AAC/E,OAACL;;;AAhBP,CAAA,AAAA,+GAAA,/GAASL,0HAkBUE,MAAKO;;AAlBxB,AAAA,gBAAA,ZAkBmBP;AAlBnB,AAmBI,IAAMQ,iBAAe,AAAkBD;IACjCnB,QAAe,AAACH,qCAASuB;AAD/B,AAEE,AAACN,yGAAQ,AAACV,wBAAO,6HAAA,yBAAA,8DAAA,pNAACc,6DAAO,SAAA,RAAKlB,oEAAY,AAAQoB,kCAA8B,AAACE,8BAAc,AAAaH;;AAAgB,OAACJ;;;AArBnI,CAAA,AAAA,4GAAA,5GAASL,uHAuBOE,MAAKO;;AAvBrB,AAAA,gBAAA,ZAuBgBP;AAvBhB,AAwBI,IAAMQ,iBAAe,AAAkBD;IACjCnB,QAAe,AAACH,qCAASuB;AAD/B,AAEE,AAACN,yGAAQ,AAACb,0CAAcmB,eAAe,AAACG,qBAAI,6HAAA,yBAAA,tJAACL,6DAAO,SAAA,RAAKlB,oEAAY,AAAQoB;;AAC7E,OAACL;;;AA3BP,CAAA,AAAA,6GAAA,7GAASL,wHA6BQE,MAAKO;;AA7BtB,AAAA,gBAAA,ZA6BiBP;AA7BjB,AA8BI,OAACE,yGAAQ,AAACS,qBAAI,AAAW,AAAaJ;;;AA9B1C,CAAA,AAAA,4GAAA,5GAAST,uHAgCOE,MAAKY;;AAhCrB,AAAA,gBAAA,ZAgCgBZ;AAhChB,AAiCI,OAACa,qCAAcD;;;AAjCnB,CAAA,6DAAA,7DAASd;AAAT,AAAA,AAAA;;;AAAA,CAAA,mEAAA,nEAASA;;AAAT,CAAA,sEAAA,tEAASA;;AAAT,CAAA,2EAAA,WAAAJ,mBAAAC,qBAAAC,9HAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;yDAAA,zDAASI;AAAT,AAAA,YAAAD;;;AAASA,AAmCT,yDAAA,zDAAMgB;AAAN,AACE,YAAAhB","names":["speclj.report.documentation/level-of","component","cljs.core/deref","level","speclj.report.documentation/maybe-focused","text","cljs.core/not","speclj.reporting/yellow","cljs.core/PROTOCOL_SENTINEL","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","speclj.report.documentation/DocumentationReporter","speclj.report.documentation/->DocumentationReporter","this","message","cljs.core.println","cljs.core/flush","description","cljs.core/println","speclj.reporting.indent","result","characteristic","speclj.reporting/green","speclj.platform/error-message","speclj.reporting/red","results","speclj.report.progress/print-summary","speclj.report.documentation/new-documentation-reporter"],"sourcesContent":["(ns speclj.report.documentation\n  (:require [speclj.platform :refer [error-message]]\n            [speclj.report.progress :refer [print-summary]]\n            [speclj.reporting :refer [green indent red yellow]]))\n\n(defn level-of [component]\n  (loop [component @(.-parent component) level 0]\n    (if component\n      (recur @(.-parent component) (inc level))\n      level)))\n\n(defn maybe-focused [component text]\n  (if-not @(.-is-focused? component) text (str text \" \" (yellow \"[FOCUS]\"))))\n\n(deftype DocumentationReporter []\n  speclj.reporting/Reporter\n\n  (report-message [this message]\n    (println message) (flush))\n\n  (report-description [this description]\n    (let [level (level-of description)]\n      (when (zero? level) (println))\n      (println (maybe-focused description (str (indent level (.-name description)))))\n      (flush)))\n\n  (report-pass [this result]\n    (let [characteristic (.-characteristic result)\n          level          (level-of characteristic)]\n      (println (maybe-focused characteristic (green (indent (dec level) \"- \" (.-name characteristic)))))\n      (flush)))\n\n  (report-pending [this result]\n    (let [characteristic (.-characteristic result)\n          level          (level-of characteristic)]\n      (println (yellow (indent (dec level) \"- \" (.-name characteristic) \" (PENDING: \" (error-message (.-exception result)) \")\"))) (flush)))\n\n  (report-fail [this result]\n    (let [characteristic (.-characteristic result)\n          level          (level-of characteristic)]\n      (println (maybe-focused characteristic (red (indent (dec level) \"- \" (.-name characteristic) \" (FAILED)\"))))\n      (flush)))\n\n  (report-error [this result]\n    (println (red (.toString (.-exception result)))))\n\n  (report-runs [this results]\n    (print-summary results)))\n\n(defn new-documentation-reporter []\n  (DocumentationReporter.))\n"],"x_google_ignoreList":[0]}