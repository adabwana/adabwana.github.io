{"version":3,"sources":["speclj/results.cljc"],"mappings":"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","names":["this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","speclj.results/PassResult","speclj.results/->PassResult","characteristic","seconds","speclj.results/FailResult","speclj.results/->FailResult","failure","speclj.results/PendingResult","speclj.results/->PendingResult","exception","speclj.results/ErrorResult","speclj.results/->ErrorResult","speclj.results/pass-result","speclj.results/fail-result","speclj.results/pending-result","speclj.results/error-result","speclj.results/pass?","result","cljs.core._EQ_","cljs.core/type","speclj.results/fail?","speclj.results/pending?","speclj.results/error?","speclj.results/failure?","speclj.results/fail-count","results","cljs.core/count","cljs.core.filter","speclj.results/categorize","cljs.core.reduce","tally","cljs.core.update_in","cljs.core/conj"],"sourcesContent":["(ns speclj.results)\n\n(deftype PassResult [characteristic seconds])\n(deftype FailResult [characteristic seconds failure])\n(deftype PendingResult [characteristic seconds exception])\n(deftype ErrorResult [characteristic seconds exception])\n\n(defn pass-result [characteristic seconds]\n  (PassResult. characteristic seconds))\n\n(defn fail-result [characteristic seconds failure]\n  (FailResult. characteristic seconds failure))\n\n(defn pending-result [characteristic seconds exception]\n  (PendingResult. characteristic seconds exception))\n\n(defn error-result [exception]\n  (ErrorResult. nil 0 exception))\n\n(defn pass? [result] (= (type result) PassResult))\n(defn fail? [result] (= (type result) FailResult))\n(defn pending? [result] (= (type result) PendingResult))\n(defn error? [result] (= (type result) ErrorResult))\n(defn failure? [result] (or (fail? result) (error? result)))\n(defn fail-count [results] (count (filter failure? results)))\n\n(defn categorize [results]\n  (reduce (fn [tally result]\n            (cond\n              (pending? result) (update-in tally [:pending] conj result)\n              (error? result) (update-in tally [:error] conj result)\n              (fail? result) (update-in tally [:fail] conj result)\n              :else (update-in tally [:pass] conj result)))\n          {:pending [] :fail [] :pass [] :error []}\n          results))"],"x_google_ignoreList":[0]}