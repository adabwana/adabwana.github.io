{"version":3,"sources":["speclj/platform.cljs"],"mappings":";AAGA,uBAAA,vBAAKA;AACL,iCAAA,jCAAKC;AAEL,AAAKC,0BAAQ,eAAA,fAACC;AAEd,4BAAA,5BAAMC,gEAAKC;AAAX,AAAgB,OAACC,6CAAEJ,wBAAQ,AAACC,eAAKE;;AAEjC,AAAA;;;;;;;AAAA;AAAA,CAAA,uCAAA,vCAASM;AAAT,AAAA,AAAA;;;AAAA,CAAA,6CAAA,7CAASA;;AAAT,CAAA,gDAAA,hDAASA;;AAAT,CAAA,qDAAA,WAAAJ,mBAAAC,qBAAAC,xGAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;mCAAA,nCAASI,8EAAaC;AAAtB,AAAA,YAAAF,4BAAsBE;;;AAAbF,AAGT,AAAA;;;;;;;AAAA;AAAA,CAAA,uCAAA,vCAASG;AAAT,AAAA,AAAA;;;AAAA,CAAA,6CAAA,7CAASA;;AAAT,CAAA,gDAAA,hDAASA;;AAAT,CAAA,qDAAA,WAAAP,mBAAAC,qBAAAC,xGAASK;AAAT,AAAA,OAAAJ,iBAAAF,qBAAA;;;AAAA;;;mCAAA,nCAASO,8EAAaF;AAAtB,AAAA,YAAAC,4BAAsBD;;;AAAbC,AAET,AAAA,AAEA,gDAAA,hDAAME;AAAN,AACEC;;AAEF,AAAKC,4BAAUC;AACf,AAAKC,4BAAUC;AACf,AAAKC,0BAAQX;AACb,AAAKY,0BAAQT;AAEb,uDAAA,vDAAMU,sHAAgCC,SAASC,OAAOC;AAAtD,AACE,QAAG,AAACC,SAAY,CAAGH,WAASC,WAAS,AAACE,SAAYD;;AAEpD,iCAAA,jCAAME,0EAAUC;AAAhB,AAAmB,OAACC,mDAAK,AAAC5B,eAAK2B,GAAGP;;AAClC,iCAAA,jCAAMS,0EAAUF;AAAhB,AAAmB,OAACC,mDAAK,AAAC5B,eAAK2B,GAAGR;;AAElC,gCAAA,hCAAMW,wEAAeH;AAArB,AAAwB,OAAWA;;AACnC,iCAAA,jCAAMI,0EAAgBJ;AAAtB,AACE,oBACE,AAAYA;AAAG,gEAAA,ZAAK,AAAYA,4DAAO,iBAAAK,mBAAI,AAAcL;AAAlB,AAAA,oBAAAK;AAAAA;;AAAA;;;;AADzC,oBAEE,AAASL;AAAG,OAACM,oBAAS,AAACC,4CAAI,AAACC,2BAAgB,AAASR,SAAI,AAACS,gBAAM,AAACD,2BAAgB,AAAWR;;AAF9F,AAAA;;;;;AAIF,8BAAA,9BAAMU,oEAAaV;AAAnB,AAAsB,OAACW,eAAK,AAACH,2BAAgB,iBAAAH,mBAAI,AAASL;AAAb,AAAA,oBAAAK;AAAAA;;AAAgB,OAAWL;;;;AACxE,wBAAA,xBAAMY,wDAAOZ;AAAb,AAAA;;AACA,oCAAA,pCAAMa,gFAAmBb;AAAzB,AAA4B,OAACc,yGAAQ,iBAAAT,mBAAI,AAASL;AAAb,AAAA,oBAAAK;AAAAA;;AAAA;;;;AACrC,qCAAA,rCAAMU,kFAAcC;AAApB,AAAA;;AAEA,4BAAA,5BAAMC,gEAAWC;AAAjB,AAAoB,oBAAIA;AAAE,OAAQA;;AAAd;;;AAEpB,iCAAA,jCAAMC,0EAAgBC;AAAtB,AAA4B,oBAAA,bAAUA;;AACtC,+BAAA,/BAAMC;AAAN,AAAsB,OAAU,KAAAC;;AAChC,6BAAA,7BAAMC,kEAAYC;AAAlB,AAAyB,2CAAA,nCAAG,CAAG,AAAU,KAAAF,oBAAYE;;AAErD,CAAMC,iCAAW,WAAKC;AAAL,AAAY,OAAMC,YAAWD;;AAE9C,qCAAA,rCAAME,kFAAoBC,QAAQC;AAAlC,AACE,IAAMC,OAAK,yCAAA,4CAAA,pFAAK,+BAAA,IAAA,nCAACC,uBAAYH,qBAAqB,+BAAA,IAAA,nCAACG,uBAAYF;AAA/D,AACE","names":["speclj.platform/endl","speclj.platform/file-separator","speclj.platform/re-type","cljs.core/type","speclj.platform/re?","obj","cljs.core._EQ_","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","speclj.platform/SpecFailure","speclj.platform/->SpecFailure","message","speclj.platform/SpecPending","speclj.platform/->SpecPending","speclj.platform/bound-by-should-invoke?","speclj.platform/*bound-by-should-invoke*","speclj.platform/throwable","js/Object","speclj.platform/exception","js/Error","speclj.platform/failure","speclj.platform/pending","speclj.platform/difference-greater-than-delta?","expected","actual","delta","js/Math.abs","speclj.platform/pending?","e","cljs.core.isa_QMARK_","speclj.platform/failure?","speclj.platform/error-message","speclj.platform/failure-source","or__5002__auto__","clojure.string/trim","cljs.core.nth","clojure.string/split-lines","cljs.core/count","speclj.platform/stack-trace","cljs.core/rest","speclj.platform/cause","speclj.platform/print-stack-trace","cljs.core.println","speclj.platform/elide-level?","stack-element","speclj.platform/type-name","t","speclj.platform/format-seconds","secs","speclj.platform/current-time","js/Date","speclj.platform/secs-since","start","cljs.core/*print-fn*","thing","js/console","speclj.platform/dynamically-invoke","ns-name","fn-name","code","clojure.string/replace"],"sourcesContent":["(ns speclj.platform\n  (:require [clojure.string :as str]))\n\n(def endl \"\\n\")\n(def file-separator \"/\")\n\n(def re-type (type #\".\"))\n\n(defn re? [obj] (= re-type (type obj)))\n\n(deftype SpecFailure [message])\n;(set! specljs.platform.SpecFailure/prototype (js/Error.))\n;(set! (.-constructor specljs.platform.SpecFailure/prototype) SpecFailure)\n(deftype SpecPending [message])\n\n(declare ^:dynamic *bound-by-should-invoke*)\n\n(defn bound-by-should-invoke? []\n  *bound-by-should-invoke*)\n\n(def throwable js/Object)\n(def exception js/Error)\n(def failure SpecFailure)\n(def pending SpecPending)\n\n(defn difference-greater-than-delta? [expected actual delta]\n  (> (js/Math.abs (- expected actual)) (js/Math.abs delta)))\n\n(defn pending? [e] (isa? (type e) pending))\n(defn failure? [e] (isa? (type e) failure))\n\n(defn error-message [e] (.-message e))\n(defn failure-source [e]\n  (cond\n    (.-fileName e) (str (.-fileName e) \":\" (or (.-lineNumber e) \"?\"))\n    (.-stack e) (str/trim (nth (str/split-lines (.-stack e)) (count (str/split-lines (.-message e)))))\n    :else \"unkown-file:?\"))\n(defn stack-trace [e] (rest (str/split-lines (or (.-stack e) (.toString e)))))\n(defn cause [e] nil)\n(defn print-stack-trace [e] (println (or (.-stack e) \"missing stack trace\")))\n(defn elide-level? [stack-element] false)\n\n(defn type-name [t] (if t (.-name t) \"nil\"))\n\n(defn format-seconds [secs] (.toFixed secs 5))\n(defn current-time [] (.getTime (js/Date.)))\n(defn secs-since [start] (/ (- (.getTime (js/Date.)) start) 1000.0))\n\n(set! *print-fn* (fn [thing] (.log js/console thing)))\n\n(defn dynamically-invoke [ns-name fn-name]\n  (let [code (str (str/replace ns-name \"-\" \"_\") \".\" (str/replace fn-name \"-\" \"_\") \"();\")]\n    (js* \"eval(~{code})\")))\n\n"],"x_google_ignoreList":[0]}